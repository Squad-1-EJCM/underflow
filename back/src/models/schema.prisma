// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  cpf               Int      @unique
  email             String   @unique
  name              String
  lastName          String
  salt              String
  hassPassword      String   @map("hash_password")
  state             String
  city              String
  neighborhood      String
  street            String
  houseNumber       String   @map("house_number")
  addressSupplement String?  @map("address_supplement")
  birthday          DateTime @map("birthday")
  phoneNumber       String   @unique @map("phone_number")
  imgUrl            String?  @map("img_url")

  publishedBooks Book[]
  favoritedBooks BooksOnFavorites[]
  commentedBooks UsersOnComments[]
  carts          Cart[]
  purchasesMade  PurchaseOnUser[]
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  price       Decimal  @db.Money
  discount    Decimal? @db.Money
  publishDate DateTime @default(now()) @map("publish_date")
  edition     String
  language    String
  condition   String
  format      String
  description String
  imgUrl      String   @map("img_url")
  userId      Int      @unique @map("user_id")

  categories        Category[]
  authors           String[]
  publisherUser     User               @relation(fields: [userId], references: [id])
  usersWhoFavorited BooksOnFavorites[]
  booksOnCart       BooksOnCart[]
}

model Category {
  bookId   Int    @unique @map("book_id")
  book     Book   @relation(fields: [bookId], references: [id])
  category String

  @@id([bookId, category])
}

model BooksOnFavorites {
  userId        Int  @unique @map("user_id")
  user          User @relation(fields: [userId], references: [id])
  bookId        Int  @unique @map("book_id")
  favoritedBook Book @relation(fields: [bookId], references: [id])

  @@id([userId, bookId])
}

model Comment {
  userId          Int               @unique @map("user_id")
  bookId          Int               @unique @map("book_id")
  content         String
  publish_date    DateTime          @default(now()) @map("publish_date")
  usersOnComments UsersOnComments[]

  @@id([userId, bookId, publish_date])
}

model UsersOnComments {
  userId      Int      @unique @map("user_id")
  bookId      Int      @unique @map("book_id")
  publishDate DateTime @map("publish_date")
  user        User     @relation(fields: [userId], references: [id])
  comment     Comment  @relation(fields: [userId, bookId, publishDate], references: [userId, bookId, publish_date])

  @@id([userId, bookId, publishDate])
}

model Cart {
  id          Int           @id @default(autoincrement())
  userId      Int           @unique @map("user_id")
  user        User          @relation(fields: [userId], references: [id])
  totalValue  Decimal       @map("total_value") @db.Money
  quantity    Int
  insertDate  DateTime      @default(now()) @map("insert_date")
  booksOnCart BooksOnCart[]
}

model BooksOnCart {
  cartId Int  @unique @map("cart_id")
  cart   Cart @relation(fields: [cartId], references: [id])
  bookId Int  @unique @map("book_id")
  book   Book @relation(fields: [bookId], references: [id])

  @@id([cartId, bookId])
}

model Purchase {
  userId          Int              @unique @map("user_id")
  cartId          Int              @unique @map("cart_id")
  purchaseDate    DateTime         @default(now()) @map("purchase_date")
  totalValue      Decimal          @map("total_value") @db.Money
  paymentMethod   String           @map("payment_method")
  purchasesOnUser PurchaseOnUser[]

  @@id([userId, cartId])
}

model PurchaseOnUser {
  cartId       Int      @unique @map("cart_id")
  userId       Int      @unique @map("user_id")
  quantity     Int
  purchaseDate DateTime @default(now()) @map("purchase_date")
  amomount     Decimal  @map("ammount") @db.Money

  purchase Purchase @relation(fields: [cartId, userId], references: [cartId, userId])
  user     User     @relation(fields: [userId], references: [id])

  @@id([cartId, userId])
}
