// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  cpf               String             @unique
  email             String             @unique
  name              String
  lastName          String             @map("last_name")
  salt              String
  hashPassword      String             @map("hash_password")
  state             String
  city              String
  neighborhood      String
  cep               String
  street            String
  houseNumber       String             @map("house_number")
  addressSupplement String?            @map("address_supplement")
  birthday          DateTime           @map("birthday")
  phoneNumber       String             @unique @map("phone_number")
  imgUrl            String?            @map("img_url")
  publishedBooks    Book[]
  favoritedBooks    BooksOnFavorites[]
  commentedBooks    UsersOnComments[]
  carts             Cart[]
  purchasesMade     PurchaseOnUser[]

  @@map("user")
}

model Book {
  id                Int                @id @default(autoincrement())
  title             String
  price             Decimal            @db.Money
  discount          Decimal?           @db.Money
  publishDate       DateTime           @default(now()) @map("publish_date")
  edition           String
  language          String
  condition         String
  format            String
  description       String
  imgUrl            String             @map("img_url")
  userId            Int                @unique @map("user_id")
  categories        Category[]
  authors           String[]
  publisherUser     User               @relation(fields: [userId], references: [id])
  usersWhoFavorited BooksOnFavorites[]
  booksOnCart       BooksOnCart[]
  hasBeenpurchased  Boolean            @default(false) @map("has_been_purchased")

  @@map("book")
}

model Category {
  bookId   Int    @map("book_id")
  book     Book   @relation(fields: [bookId], references: [id])
  category String

  @@unique([bookId, category ])
  @@id([bookId, category])
  @@map("category")
}

model BooksOnFavorites {
  userId        Int      @unique @map("user_id")
  user          User     @relation(fields: [userId], references: [id])
  bookId        Int      @unique @map("book_id")
  favoritedBook Book     @relation(fields: [bookId], references: [id])
  insertionDate DateTime @default(now()) @map("insertion_date")

  @@id([userId, bookId])
  @@map("books_on_favorites")
}

model Comment {
  userId          Int               @unique @map("user_id")
  bookId          Int               @unique @map("book_id")
  content         String
  publishDate     DateTime          @default(now()) @map("publish_date")
  usersOnComments UsersOnComments[]

  @@id([userId, bookId, publishDate])
  @@map("comment")
}

model UsersOnComments {
  userId      Int      @unique @map("user_id")
  bookId      Int      @unique @map("book_id")
  publishDate DateTime @map("publish_date")
  user        User     @relation(fields: [userId], references: [id])
  comment     Comment  @relation(fields: [userId, bookId, publishDate], references: [userId, bookId, publishDate])

  @@id([userId, bookId, publishDate])
  @@map("user_on_comment")
}

model Cart {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique @map("user_id")
  user         User          @relation(fields: [userId], references: [id])
  totalValue   Decimal       @default(0.00) @map("total_value") @db.Money
  creationDate DateTime      @default(now()) @map("creation_date")
  booksOnCart  BooksOnCart[]
  purchaseMade Boolean       @default(false) @map("purchase_made")
  purchase     Purchase?

  @@map("cart")
}

model BooksOnCart {
  cartId        Int      @unique @map("cart_id")
  cart          Cart     @relation(fields: [cartId], references: [id])
  bookId        Int      @unique @map("book_id")
  book          Book     @relation(fields: [bookId], references: [id])
  ammonut       Int
  insertionDate DateTime @default(now()) @map("insertion_date")

  @@id([cartId, bookId])
  @@map("books_on_cart")
}

model Purchase {
  userId          Int              @unique @map("user_id")
  cartId          Int              @unique @map("cart_id")
  purchaseDate    DateTime         @default(now()) @map("purchase_date")
  totalValue      Decimal          @map("total_value") @db.Money
  paymentMethod   String           @map("payment_method")
  purchasesOnUser PurchaseOnUser[]
  cart            Cart             @relation(fields: [cartId], references: [id])

  @@id([userId, cartId])
  @@map("purchase")
}

model PurchaseOnUser {
  cartId       Int      @unique @map("cart_id")
  userId       Int      @unique @map("user_id")
  purchaseDate DateTime @default(now()) @map("purchase_date")
  purchase     Purchase @relation(fields: [cartId, userId], references: [cartId, userId])
  user         User     @relation(fields: [userId], references: [id])

  @@id([cartId, userId])
  @@map("purchase_on_user")
}
